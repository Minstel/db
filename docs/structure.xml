<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a2" title="DB">
  <file path="test/src/DBTest.php" hash="713d422ad282c1e11c926a6f4d1a00ce" package="Misc">
    <docblock line="2">
      <description><![CDATA[Tests for DB.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="author" description="Arnold Daniels"/>
    </docblock>
    <include line="9" type="Require Once" package="Default">
      <name>PHPUnit/Framework.php</name>
      <docblock line="8">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </include>
    <include line="11" type="Require Once" package="Default">
      <name>/../../src/DB.php</name>
    </include>
    <class final="false" abstract="false" namespace="default" line="19" package="Test\DB">
      <name>DBTest</name>
      <full_name>\DBTest</full_name>
      <extends>\PHPUnit_Framework_TestCase</extends>
      <docblock line="13">
        <description><![CDATA[Tests for DB.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="13" name="package" description="Test"/>
        <tag line="13" name="subpackage" description="DB"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="25" package="Misc">
        <name>$reuse_db</name>
        <default><![CDATA[false]]></default>
        <docblock line="21">
          <description><![CDATA[Should I reuse the created DBs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="31" package="">
        <name>createDB</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Create new databases.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="52" package="">
        <name>dropDB</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Drop databases.]]></description>
          <long-description><![CDATA[<p>Please call dropDB if you've modified data.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="default" line="63" package="">
        <name>setUp</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Sets up the fixture, for example, open a network connection.]]></description>
          <long-description><![CDATA[<p>This method is called before a test is executed.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="default" line="74" package="">
        <name>tearDown</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Tears down the fixture, for example, closes a network connection.]]></description>
          <long-description><![CDATA[<p>This method is called after a test is executed.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="86" package="">
        <name>tearDownAfterClass</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[This method is called after the last test of this test class is run.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="95" package="">
        <name>testConn</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Test DB::conn()]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="108" package="">
        <name>testConn_Fail</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Test DB::conn() for an unexisting connection]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="120" package="">
        <name>testQuote</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Test DB::quote()]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="144" package="">
        <name>testBackquote</name>
        <type>function</type>
        <docblock line="141">
          <description><![CDATA[Test DB::backquote()]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="156" package="">
        <name>testParse</name>
        <type>function</type>
        <docblock line="151">
          <description><![CDATA[Test DB::parse() with basic placeholders]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="depends" description="testQuote"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="191" package="">
        <name>testParse_Named</name>
        <type>function</type>
        <docblock line="186">
          <description><![CDATA[Test DB::parse() with named placeholders]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="186" name="depends" description="testQuote"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="222" package="">
        <name>testQuery</name>
        <type>function</type>
        <docblock line="216">
          <description><![CDATA[Test DB::query() with basic placeholders]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="216" name="depends" description="testConn"/>
          <tag line="216" name="depends" description="testParse"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="253" package="">
        <name>testQuery_Named</name>
        <type>function</type>
        <docblock line="247">
          <description><![CDATA[Test DB_MySQL::query() with named placeholders]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="247" name="depends" description="testConn"/>
          <tag line="247" name="depends" description="testParse_Named"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="266" package="">
        <name>testQuery_Write</name>
        <type>function</type>
        <docblock line="261">
          <description><![CDATA[Test DB_MySQL::query() with an update query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="261" name="depends" description="testConn"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="286" package="">
        <name>testQuery_DBException</name>
        <type>function</type>
        <docblock line="281">
          <description><![CDATA[Test DB_Exception by trying to execute and invalid query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="281" name="depends" description="testQuery"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="311" package="">
        <name>testSave</name>
        <type>function</type>
        <docblock line="304">
          <description><![CDATA[Test DB_MySQL::save() with a single new row of data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="304" name="depends" description="testQuote"/>
          <tag line="304" name="depends" description="testBackquote"/>
          <tag line="304" name="depends" description="testQuery"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="327" package="">
        <name>testSave_Rows</name>
        <type>function</type>
        <docblock line="322">
          <description><![CDATA[Test DB_MySQL::save() with multiple new rows of data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="322" name="depends" description="testSave"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="353" package="">
        <name>testSave_Update</name>
        <type>function</type>
        <docblock line="348">
          <description><![CDATA[Test DB_MySQL::save() with updates and inserts]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="348" name="depends" description="testSave_Rows"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="379" package="">
        <name>testSave_SkipExisting</name>
        <type>function</type>
        <docblock line="374">
          <description><![CDATA[Test DB_MySQL::save() with ignoring existing records]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="374" name="depends" description="testSave_Rows"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="src/DB/Exception.php" hash="c6166eb05357e6a3cc3da080ab2a3f5b" package="Misc">
    <docblock line="2">
      <description><![CDATA[Database exception.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="author" description="Arnold Daniels"/>
    </docblock>
    <class final="false" abstract="false" namespace="default" line="12" package="DB">
      <name>DB_Exception</name>
      <full_name>\DB_Exception</full_name>
      <extends>\Exception</extends>
      <docblock line="8">
        <description><![CDATA[Database exception.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="8" name="package" description="DB"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="18" package="Misc">
        <name>$query</name>
        <default><![CDATA[]]></default>
        <docblock line="14">
          <description><![CDATA[Failed query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="14" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="24" package="Misc">
        <name>$error</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[DB error message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="35" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Class constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="Error message" type="string" variable="$error">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="param" description="Error code" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="27" name="param" description="" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="param" description="" type="\Exception" variable="$previous">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$error</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$code</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$query</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="49" package="">
        <name>getError</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Get DB error message]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="59" package="">
        <name>getQuery</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Get failed query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="src/DB.php" hash="9b2c81343d218934f8413954c195bf48" package="Misc">
    <docblock line="2">
      <description><![CDATA[A very simple class for using MySQL.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="author" description="Arnold Daniels"/>
    </docblock>
    <include line="9" type="Require Once" package="Default">
      <name>/DB/Exception.php</name>
      <docblock line="8">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="default" line="21" package="DB">
      <name>DB</name>
      <full_name>\DB</full_name>
      <extends>\mysqli</extends>
      <docblock line="11">
        <description><![CDATA[MySQL DB connection.]]></description>
        <long-description><![CDATA[<p>{ @example
  new DB($host, $user, $pwd, $dbname);
  $result = DB::conn()->query("SELECT * FROM foo WHERE id = ?", $id);
}}</p>]]></long-description>
        <tag line="11" name="package" description="DB"/>
      </docblock>
      <constant namespace="default" line="29" package="Misc">
        <name>SKIP_EXISTING</name>
        <value><![CDATA[false]]></value>
        <docblock line="23">
          <description><![CDATA[Don't update existing records when saving, but ignore them instead.]]></description>
          <long-description><![CDATA[<p>{@internal Just som syntax candy }}</p>]]></long-description>
          <tag line="23" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="34" package="Misc">
        <name>$connection</name>
        <default><![CDATA[array()]]></default>
        <docblock line="31">
          <description><![CDATA[Created DB connection]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="42" package="">
        <name>conn</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Get the DB connection.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="return" description="" type="\DB">
            <type by_reference="false">\DB</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="63" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Class constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="string" variable="$passwd">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="string" variable="$dbname">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="int" variable="$port">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$host</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$username</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$passwd</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$dbname</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$port</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="83" package="">
        <name>query</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Performs a query on the database.]]></description>
          <long-description><![CDATA[<p>Don't mix both types ('?' and ':key') of placeholders.</p>]]></long-description>
          <tag line="72" name="example" description="DB::conn()-&gt;query(&quot;SELECT * FROM mytable WHERE id=?&quot;, $id);"/>
          <tag line="72" name="example" description="DB::conn()-&gt;query(&quot;SELECT * FROM mytable WHERE name=:name AND age&gt;:age AND status='A'&quot;, array('id'=&gt;$id, 'age'=&gt;$age));"/>
          <tag line="72" name="param" description="" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="param" description="Parameters can be passed as indifidual arguments or as array" type="mixed" variable="$params">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="72" name="return" description="" type="\mysqli_result">
            <type by_reference="false">\mysqli_result</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="83">
          <name>$params</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="105" package="">
        <name>save</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Insert or update a record.]]></description>
          <long-description><![CDATA[<p>All rows should have the same keys.</p>]]></long-description>
          <tag line="93" name="example" description="$db-&gt;save('mytable', $row)"/>
          <tag line="93" name="example" description="$db-&gt;save('mytable', array($row1, $row2, $row3))"/>
          <tag line="93" name="param" description="" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="param" description="One or multiple rows of values" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="93" name="param" description="Update on duplicate key" type="boolean" variable="$update">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="93" name="return" description="Last insert ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="105">
          <name>$values</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
        <argument line="105">
          <name>$update</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="142" package="">
        <name>quote</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[Quote a value so it can be savely used in a query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="135" name="param" description="Return $empty if $value is null" type="string" variable="$empty">
            <type by_reference="false">string</type>
          </tag>
          <tag line="135" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="142">
          <name>$empty</name>
          <default><![CDATA['NULL']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="158" package="">
        <name>backquote</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Quote a field, table or dbname so it can be savely used in a query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="152" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="174" package="">
        <name>parse</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[Insert parameters into SQL query.]]></description>
          <long-description><![CDATA[<p>Don't mix both types ('?' and ':key') of placeholders.</p>]]></long-description>
          <tag line="163" name="example" description="DB::parse(&quot;SELECT * FROM mytable WHERE id=?&quot;, $id);"/>
          <tag line="163" name="example" description="DB::parse(&quot;SELECT * FROM mytable WHERE name=:name AND age&gt;:age AND status='A'&quot;, array('id'=&gt;$id, 'age'=&gt;$age));"/>
          <tag line="163" name="param" description="" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="163" name="param" description="Parameters can be passed as indifidual arguments or as array" type="mixed" variable="$params">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="163" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="174">
          <name>$params</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="" full_name=""/>
  <package name="DB" full_name="DB"/>
  <package name="Default" full_name="Default"/>
  <package name="Misc" full_name="Misc"/>
  <package name="Test" full_name="Test">
    <package name="DB" full_name="Test\DB"/>
  </package>
  <namespace name="default" full_name="default"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
